{"version":3,"sources":["components/Activity.js","components/Stat.js","components/Section.js","App.js","serviceWorker.js","index.js"],"names":["Activity","react_default","a","createElement","className","this","props","quantity","description","Component","Stat","periodTitle","preparePeriodTitle","period","isToday","concat","users","purchases","Section","_this","title","Object","keys","data","map","key","type","components_Activity","components_Stat","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isLoading","_this2","date","arguments","length","undefined","setState","fetch","then","res","json","update","event","target","value","defaultValue","dates","current","min","max","onBlur","onDateChange","bind","components_Section","activities","today","stats","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f33218e8.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass Activity extends Component {\n  render() {\n    return (\n      <article className=\"card card--half\">\n        <dl className=\"stat stat--overview\">\n          <dd className=\"stat__count\">{ this.props.quantity }</dd>\n          <dt className=\"stat__description\">{ this.props.description }</dt>\n        </dl>\n      </article>\n    )\n  }\n}\n\nActivity.propTypes = {\n  quantity: PropTypes.number.isRequired,\n  description: PropTypes.string.isRequired,\n}\n\nexport default Activity\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass Stat extends Component {\n  render() {\n    const periodTitle = this.preparePeriodTitle(this.props.period, this.props.isToday)\n    return (\n      <article className=\"card card--full\">\n        <dl className={`stat stat--period stat--${this.props.period}`}>\n          <dt className=\"stat__description\">{ periodTitle }</dt>\n          <dd className=\"stat__count\">{`${this.props.users} people`}</dd>\n          <dt className=\"stat__description\">Purchases total</dt>\n          <dd className=\"stat__count stat__count--secondary\">{ this.props.purchases }</dd>\n        </dl>\n      </article>\n    )\n  }\n\n  preparePeriodTitle(period, isToday) {\n    switch (period) {\n      case 'day':\n        return isToday ? 'Today' : 'That day'\n      case 'month':\n      case 'week':\n        return isToday\n          ? 'This ' + period\n          : 'That ' + period\n      case 'tilltoday':\n        return 'That day till today'\n      default:\n        return 'No period'\n    }\n  }\n}\n\nStat.propTypes = {\n  period: PropTypes.string.isRequired,\n  users: PropTypes.number.isRequired,\n  purchases: PropTypes.number.isRequired,\n  isToday: PropTypes.bool\n}\n\nexport default Stat\n","import React, { Component } from 'react'\nimport Activity from './Activity'\nimport Stat from './Stat'\nimport PropTypes from 'prop-types'\n\nclass Section extends Component {\n  render() {\n    return (\n      <section className=\"section\">\n        <h2 className=\"section__header\">{this.props.title}</h2>\n        <div className=\"section__deck\">\n        {\n          Object.keys(this.props.data).map(key => {\n            if (this.props.type === 'activity') return (\n              <Activity\n                key={`${this.props.title}-${key}`}\n                quantity={this.props.data[key]}\n                description={key}\n              />\n            )\n            return (\n              <Stat\n                key={`${this.props.title}-${key}`}\n                period={key}\n                users={this.props.data[key].users}\n                purchases={this.props.data[key].purchases}\n                isToday={this.props.isToday}\n              />\n            )\n          })\n        }\n        </div>\n      </section>\n    )\n  }\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  type: PropTypes.oneOf(['activity', 'stat']).isRequired,\n  data: PropTypes.object.isRequired,\n  isToday: PropTypes.bool\n}\n\nexport default Section\n","import React, { Component } from 'react'\nimport Section from './components/Section'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true,\n      data: {}\n    }\n  }\n\n  update(date = undefined) {\n    this.setState({isLoading: true})\n    const q = date ? '?date='+date : ''\n    fetch(`/api/stats${q}`)\n      .then(res => res.json())\n      .then(json => {\n        this.setState({\n          isLoading: false,\n          data: json.data\n        })\n      })\n  }\n\n  componentDidMount() {\n    this.update()\n  }\n\n  onDateChange(event) {\n    this.update(event.target.value)\n  }\n\n  render() {\n    if (this.state.isLoading) return <p className=\"loading\">Loading...</p>\n\n    return (\n      <div className=\"root\">\n        <header className=\"header\">\n          <input\n            type=\"date\"\n            className=\"header__text\"\n            defaultValue={this.state.data.dates.current}\n            min={this.state.data.dates.min}\n            max={this.state.data.dates.max}\n            onBlur={this.onDateChange.bind(this)}\n          />\n        </header>\n        <main>\n          <Section\n            title=\"Users\"\n            type=\"activity\"\n            data={this.state.data.activities}\n            isToday={this.state.data.dates.today === this.state.data.dates.current}\n          />\n          <Section\n            title=\"Purchases\"\n            type=\"stat\"\n            data={this.state.data.stats}\n            isToday={this.state.data.dates.today === this.state.data.dates.current}\n          />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './master.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}